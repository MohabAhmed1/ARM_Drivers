
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000708  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000838  08000840  00010840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000838  08000838  00010840  2**0
                  CONTENTS
  4 .ARM          00000000  08000838  08000838  00010840  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000838  08000840  00010840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000838  08000838  00010838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800083c  0800083c  0001083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f14  20000000  08000840  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f14  08000840  00013f14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010840  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000155f  00000000  00000000  00010869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007bf  00000000  00000000  00011dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00012588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000310  00000000  00000000  00012910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000abd  00000000  00000000  00012c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014cd  00000000  00000000  000136dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000589a  00000000  00000000  00014baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001a444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c08  00000000  00000000  0001a494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000820 	.word	0x08000820

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000820 	.word	0x08000820

08000170 <RCC_voidInitSysClock>:
#include "../00-RCC/RCC_private.h"
#include "../00-RCC/RCC_register.h"


void RCC_voidInitSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Turn ON HSI with no trimming*/
	RCC->CR = 0x00000081;

#elif SYSTEM_CLK == SYS_CLK_HSE_CRYSTAL
	/*Selecting HSE as system clock without choosing prescaler*/
	RCC->CFGR = 1;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000176:	2201      	movs	r2, #1
 8000178:	605a      	str	r2, [r3, #4]

	/*Selecting HSE with no bypass and trimming*/
	RCC->CR = 0x00010080;
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <RCC_voidInitSysClock+0x24>)
 800017c:	4a06      	ldr	r2, [pc, #24]	; (8000198 <RCC_voidInitSysClock+0x28>)
 800017e:	601a      	str	r2, [r3, #0]

	/*Selecting Clock security system*/
#if RCC_CSS_ENABLE == ENABLE
	SET_BIT(RCC->CR,RCC_CR_CSSON);
#elif RCC_CSS_ENABLE == DISABLE
	CLR_BIT(RCC->CR,RCC_CR_CSSON);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000186:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800018a:	6013      	str	r3, [r2, #0]
#endif

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000
 8000198:	00010080 	.word	0x00010080

0800019c <RCC_voidEnableClock>:


u8 RCC_voidEnableClock(u8 Copy_u8PeripheralID,u8 Copy_u8BusId)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	460a      	mov	r2, r1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState = OK;
 80001ac:	2301      	movs	r3, #1
 80001ae:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralID <= 31)
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2b1f      	cmp	r3, #31
 80001b4:	d82a      	bhi.n	800020c <RCC_voidEnableClock+0x70>
	{
		switch (Copy_u8BusId)
 80001b6:	79bb      	ldrb	r3, [r7, #6]
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	d01a      	beq.n	80001f2 <RCC_voidEnableClock+0x56>
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dc22      	bgt.n	8000206 <RCC_voidEnableClock+0x6a>
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <RCC_voidEnableClock+0x2e>
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d00a      	beq.n	80001de <RCC_voidEnableClock+0x42>
 80001c8:	e01d      	b.n	8000206 <RCC_voidEnableClock+0x6a>
		{
		case RCC_AHB:  SET_BIT(RCC->AHBENR,	Copy_u8PeripheralID); break;
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <RCC_voidEnableClock+0x80>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2101      	movs	r1, #1
 80001d2:	fa01 f303 	lsl.w	r3, r1, r3
 80001d6:	4911      	ldr	r1, [pc, #68]	; (800021c <RCC_voidEnableClock+0x80>)
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
 80001dc:	e018      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB1: SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID); break;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <RCC_voidEnableClock+0x80>)
 80001e0:	69da      	ldr	r2, [r3, #28]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	490c      	ldr	r1, [pc, #48]	; (800021c <RCC_voidEnableClock+0x80>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	61cb      	str	r3, [r1, #28]
 80001f0:	e00e      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB2: SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID); break;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <RCC_voidEnableClock+0x80>)
 80001f4:	699a      	ldr	r2, [r3, #24]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f303 	lsl.w	r3, r1, r3
 80001fe:	4907      	ldr	r1, [pc, #28]	; (800021c <RCC_voidEnableClock+0x80>)
 8000200:	4313      	orrs	r3, r2
 8000202:	618b      	str	r3, [r1, #24]
 8000204:	e004      	b.n	8000210 <RCC_voidEnableClock+0x74>
		default: 	   Local_u8ErrorState = NOK; break;
 8000206:	2302      	movs	r3, #2
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	e001      	b.n	8000210 <RCC_voidEnableClock+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 800020c:	2302      	movs	r3, #2
 800020e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40021000 	.word	0x40021000

08000220 <MSTK_voidStopInterval>:
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
	MSTK_u8ModeOfinterval=MSTK_PERIODIC_INTERVAL;
}

void MSTK_voidStopInterval(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	/*Disable the STK peripheral*/
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <MSTK_voidStopInterval+0x24>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a06      	ldr	r2, [pc, #24]	; (8000244 <MSTK_voidStopInterval+0x24>)
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
	/*Clearing load Register*/
	MSTK->MSTK_LOAD=0x00;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <MSTK_voidStopInterval+0x24>)
 8000232:	2200      	movs	r2, #0
 8000234:	605a      	str	r2, [r3, #4]
	/*Clearing value Register*/
	MSTK->MSTK_VAL=0x00;
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <MSTK_voidStopInterval+0x24>)
 8000238:	2200      	movs	r2, #0
 800023a:	609a      	str	r2, [r3, #8]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e010 	.word	0xe000e010

08000248 <SysTick_Handler>:
		Global_voidPtrCallbackFunc=Copy_ptrFunc;
	}
	return Local_u8ErrorStatus;
}
void SysTick_Handler(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	if(Global_voidPtrCallbackFunc!=NULL)
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <SysTick_Handler+0x30>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d00e      	beq.n	8000272 <SysTick_Handler+0x2a>
	{
		if(MSTK_u8ModeOfinterval==MSTK_SINGLE_INTERVAL)
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <SysTick_Handler+0x34>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d107      	bne.n	800026c <SysTick_Handler+0x24>
		{
			/*Clear load and value registers*/
			MSTK_voidStopInterval();
 800025c:	f7ff ffe0 	bl	8000220 <MSTK_voidStopInterval>
			/*Disable the interrupt*/
			CLR_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <SysTick_Handler+0x38>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <SysTick_Handler+0x38>)
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	6013      	str	r3, [r2, #0]
		}
		Global_voidPtrCallbackFunc();
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <SysTick_Handler+0x30>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4798      	blx	r3
	}
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	2000001c 	.word	0x2000001c
 800027c:	20000020 	.word	0x20000020
 8000280:	e000e010 	.word	0xe000e010

08000284 <MNVIC_u8EnableInterrupt>:
#include "NVIC_private.h"
#include "NVIC_config.h"


u8 MNVIC_u8EnableInterrupt(u8 Copy_u8IntNumber)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = OK;
 800028e:	2301      	movs	r3, #1
 8000290:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8IntNumber <=31)
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2b1f      	cmp	r3, #31
 8000296:	d805      	bhi.n	80002a4 <MNVIC_u8EnableInterrupt+0x20>
	{
		NVIC_ISER0 = (1<<Copy_u8IntNumber);
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2201      	movs	r2, #1
 800029c:	409a      	lsls	r2, r3
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <MNVIC_u8EnableInterrupt+0x48>)
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	e00d      	b.n	80002c0 <MNVIC_u8EnableInterrupt+0x3c>
	}
	else if (Copy_u8IntNumber <=63)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b3f      	cmp	r3, #63	; 0x3f
 80002a8:	d808      	bhi.n	80002bc <MNVIC_u8EnableInterrupt+0x38>
	{
		Copy_u8IntNumber -= 32; 	/*To deal with the interrupt number from the first bit*/
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3b20      	subs	r3, #32
 80002ae:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1<<Copy_u8IntNumber);
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	2201      	movs	r2, #1
 80002b4:	409a      	lsls	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MNVIC_u8EnableInterrupt+0x4c>)
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	e001      	b.n	80002c0 <MNVIC_u8EnableInterrupt+0x3c>
	}
	else
	{
		Local_u8ErrorState = NOK;
 80002bc:	2302      	movs	r3, #2
 80002be:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 80002c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000e104 	.word	0xe000e104

080002d4 <EXTI0_IRQHandler>:

	return Local_u8ErrorState;
}

void EXTI0_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE0] != NULL)
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <EXTI0_IRQHandler+0x24>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d008      	beq.n	80002f2 <EXTI0_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE0]();
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x24>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE0);
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <EXTI0_IRQHandler+0x28>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a04      	ldr	r2, [pc, #16]	; (80002fc <EXTI0_IRQHandler+0x28>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000024 	.word	0x20000024
 80002fc:	40010400 	.word	0x40010400

08000300 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE1] != NULL)
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <EXTI1_IRQHandler+0x24>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d008      	beq.n	800031e <EXTI1_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE1]();
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <EXTI1_IRQHandler+0x24>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE1);
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI1_IRQHandler+0x28>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <EXTI1_IRQHandler+0x28>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	6153      	str	r3, [r2, #20]
	else
	{
		/*Do Nothing*/
	}

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000024 	.word	0x20000024
 8000328:	40010400 	.word	0x40010400

0800032c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE2] != NULL)
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <EXTI2_IRQHandler+0x24>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d008      	beq.n	800034a <EXTI2_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE2]();
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <EXTI2_IRQHandler+0x24>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE2);
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <EXTI2_IRQHandler+0x28>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <EXTI2_IRQHandler+0x28>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000024 	.word	0x20000024
 8000354:	40010400 	.word	0x40010400

08000358 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE3] != NULL)
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <EXTI3_IRQHandler+0x24>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d008      	beq.n	8000376 <EXTI3_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE3]();
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI3_IRQHandler+0x24>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE3);
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI3_IRQHandler+0x28>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI3_IRQHandler+0x28>)
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000024 	.word	0x20000024
 8000380:	40010400 	.word	0x40010400

08000384 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE4] != NULL)
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <EXTI4_IRQHandler+0x24>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI4_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE4]();
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI4_IRQHandler+0x24>)
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE4);
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI4_IRQHandler+0x28>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI4_IRQHandler+0x28>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000024 	.word	0x20000024
 80003ac:	40010400 	.word	0x40010400

080003b0 <TIM2_IRQHandler>:
	return Local_u8ErrorStatus;
}

/*Timer 2 ISR Handler*/
void TIM2_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(Global_voidTIM2PtrCallbackFunc!=NULL)
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <TIM2_IRQHandler+0x30>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d00e      	beq.n	80003da <TIM2_IRQHandler+0x2a>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM2==ENABLED)
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <TIM2_IRQHandler+0x34>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d102      	bne.n	80003ca <TIM2_IRQHandler+0x1a>
		{
			Global_voidTIM2PtrCallbackFunc();
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <TIM2_IRQHandler+0x30>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 80003ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d4:	f023 0301 	bic.w	r3, r3, #1
 80003d8:	6113      	str	r3, [r2, #16]
	}
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000064 	.word	0x20000064
 80003e4:	20000070 	.word	0x20000070

080003e8 <TIM3_IRQHandler>:


/*Timer 3 ISR Handler*/
void TIM3_IRQHandler(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if(Global_voidTIM3PtrCallbackFunc!=NULL)
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <TIM3_IRQHandler+0x2c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00c      	beq.n	800040e <TIM3_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM3==ENABLED)
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <TIM3_IRQHandler+0x30>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d102      	bne.n	8000402 <TIM3_IRQHandler+0x1a>
		{
			Global_voidTIM3PtrCallbackFunc();
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <TIM3_IRQHandler+0x2c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM3->SR,TIM_SR_UIF);
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <TIM3_IRQHandler+0x34>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <TIM3_IRQHandler+0x34>)
 8000408:	f023 0301 	bic.w	r3, r3, #1
 800040c:	6113      	str	r3, [r2, #16]
	}
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000068 	.word	0x20000068
 8000418:	20000071 	.word	0x20000071
 800041c:	40000400 	.word	0x40000400

08000420 <TIM4_IRQHandler>:

/*Timer 4 ISR Handler*/
void TIM4_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	if(Global_voidTIM4PtrCallbackFunc!=NULL)
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <TIM4_IRQHandler+0x2c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00c      	beq.n	8000446 <TIM4_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM4==ENABLED)
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <TIM4_IRQHandler+0x30>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d102      	bne.n	800043a <TIM4_IRQHandler+0x1a>
		{
			Global_voidTIM4PtrCallbackFunc();
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <TIM4_IRQHandler+0x2c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM4->SR,TIM_SR_UIF);
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <TIM4_IRQHandler+0x34>)
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <TIM4_IRQHandler+0x34>)
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	6113      	str	r3, [r2, #16]
	}

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000006c 	.word	0x2000006c
 8000450:	20000072 	.word	0x20000072
 8000454:	40000800 	.word	0x40000800

08000458 <DMA_voidInit>:
#include "DMA_config.h"


static void (*Globalptr2func[7])(void)={NULL};
void DMA_voidInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	#if MEM_TO_MEM==ENABLED
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_MEM2MEM;
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <DMA_voidInit+0x9c>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <DMA_voidInit+0x9c>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6093      	str	r3, [r2, #8]
	#elif MEM_TO_MEM==DISABLED
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_MEM2MEM);
	#endif
	#if CH_PRIORITY==PRIO_VERY_HIGH
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_PL1;		/*Channel Priority*/
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <DMA_voidInit+0x9c>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <DMA_voidInit+0x9c>)
 800046e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000472:	6093      	str	r3, [r2, #8]
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_PL0;
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <DMA_voidInit+0x9c>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <DMA_voidInit+0x9c>)
 800047a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047e:	6093      	str	r3, [r2, #8]
	#elif CH_PRIORITY==PRIO_LOW
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_PL1);		/*Channel Priority*/
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_PL0);
	#endif
	#if MEM_SIZE==MEM_SIZE_32
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_MSIZE1;		/*Memory size*/
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <DMA_voidInit+0x9c>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <DMA_voidInit+0x9c>)
 8000486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048a:	6093      	str	r3, [r2, #8]
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_MSIZE0);
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <DMA_voidInit+0x9c>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a18      	ldr	r2, [pc, #96]	; (80004f4 <DMA_voidInit+0x9c>)
 8000492:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000496:	6093      	str	r3, [r2, #8]
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_MSIZE1);
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_MSIZE0);

	#endif
	#if PER_SIZE==PER_SIZE_32
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_PSIZE1;		/*Peripheral Priority*/
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <DMA_voidInit+0x9c>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <DMA_voidInit+0x9c>)
 800049e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004a2:	6093      	str	r3, [r2, #8]
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_PSIZE0);
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <DMA_voidInit+0x9c>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <DMA_voidInit+0x9c>)
 80004aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ae:	6093      	str	r3, [r2, #8]
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_PSIZE1);		/*Peripheral Priority*/
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_PSIZE0);
	#endif
	/*Memory Increment*/
	#if MINC==ENABLED
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_MINC;
 80004b0:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <DMA_voidInit+0x9c>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	; (80004f4 <DMA_voidInit+0x9c>)
 80004b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ba:	6093      	str	r3, [r2, #8]
	#elif MINC==DISABLED
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_MINC);
	#endif
	/*Peripheral Increment*/
	#if PINC==ENABLED
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_PINC;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <DMA_voidInit+0x9c>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <DMA_voidInit+0x9c>)
 80004c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c6:	6093      	str	r3, [r2, #8]
	#endif
	/*Circular mode*/
	#if CIRC==ENABLED
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_CIRC;
	#elif CIRC==DISABLED
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_CIRC);
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <DMA_voidInit+0x9c>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <DMA_voidInit+0x9c>)
 80004ce:	f023 0320 	bic.w	r3, r3, #32
 80004d2:	6093      	str	r3, [r2, #8]
	#endif
	/*Interrupt Enable*/
	#if TRANSFER_INTERRUPT == ENABLED
	DMA -> Channel[CH_ID-1].CCR |= 1<<DMA_TCIE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <DMA_voidInit+0x9c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <DMA_voidInit+0x9c>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6093      	str	r3, [r2, #8]
	#elif TRANSFER_INTERRUPT == DISABLED
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_TCIE);
	#endif
	#if DIR==READ_MEM
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_DIR);
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <DMA_voidInit+0x9c>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <DMA_voidInit+0x9c>)
 80004e6:	f023 0310 	bic.w	r3, r3, #16
 80004ea:	6093      	str	r3, [r2, #8]
	#elif DIR==READ_PER
	SET_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_DIR);
	#endif
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40020000 	.word	0x40020000

080004f8 <DMA_u8ChannelStart>:

void DMA_u8ChannelStart(u32 * Copy_pu32SourceAdress, u32 * Copy_pu32DestinationAdress, u16 Copy_u16BlockLength )
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	4613      	mov	r3, r2
 8000504:	80fb      	strh	r3, [r7, #6]
	/*Channel Disabled*/
	CLR_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_EN);
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <DMA_u8ChannelStart+0x44>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <DMA_u8ChannelStart+0x44>)
 800050c:	f023 0301 	bic.w	r3, r3, #1
 8000510:	6093      	str	r3, [r2, #8]
	/*Source Address*/
	DMA -> Channel[CH_ID-1].CPAR= (u32)Copy_pu32SourceAdress;
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <DMA_u8ChannelStart+0x44>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	6113      	str	r3, [r2, #16]
	/*Destination Address*/
	DMA -> Channel[CH_ID-1].CMAR= (u32)Copy_pu32DestinationAdress;
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <DMA_u8ChannelStart+0x44>)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	6153      	str	r3, [r2, #20]
	/*Block Length*/
	DMA -> Channel[CH_ID-1].CNDTR= Copy_u16BlockLength;
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <DMA_u8ChannelStart+0x44>)
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	60d3      	str	r3, [r2, #12]
	/*Enable the Channel */

	SET_BIT(DMA -> Channel[CH_ID-1].CCR ,DMA_EN);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <DMA_u8ChannelStart+0x44>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <DMA_u8ChannelStart+0x44>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6093      	str	r3, [r2, #8]

}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40020000 	.word	0x40020000

08000540 <DMA_voidSetCallBack>:
u8 DMA_voidSetCallBack(void (*Localptr2func)(void),u8 Local_u8ChannelNumber)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	u8 Local_u8ErrorStatus=OK;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
	if(Localptr2func != NULL)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <DMA_voidSetCallBack+0x24>
	{
	Globalptr2func[Local_u8ChannelNumber-1]=Localptr2func;
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	3b01      	subs	r3, #1
 800055a:	4906      	ldr	r1, [pc, #24]	; (8000574 <DMA_voidSetCallBack+0x34>)
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000562:	e001      	b.n	8000568 <DMA_voidSetCallBack+0x28>
	}
	else
	{
		Local_u8ErrorStatus=NULL_POINTER;
 8000564:	2303      	movs	r3, #3
 8000566:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorStatus;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000074 	.word	0x20000074

08000578 <DMA1_Channel1_IRQHandler>:



void DMA1_Channel1_IRQHandler (void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if (Globalptr2func[0]!=NULL)
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <DMA1_Channel1_IRQHandler+0x30>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <DMA1_Channel1_IRQHandler+0x12>
	{
		Globalptr2func[0]();
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <DMA1_Channel1_IRQHandler+0x30>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4798      	blx	r3
	}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH1);
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <DMA1_Channel1_IRQHandler+0x34>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <DMA1_Channel1_IRQHandler+0x34>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH1);
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <DMA1_Channel1_IRQHandler+0x34>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <DMA1_Channel1_IRQHandler+0x34>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6053      	str	r3, [r2, #4]

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000074 	.word	0x20000074
 80005ac:	40020000 	.word	0x40020000

080005b0 <DMA1_Channel2_IRQHandler>:

void DMA1_Channel2_IRQHandler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if (Globalptr2func[1]!=NULL)
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <DMA1_Channel2_IRQHandler+0x30>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <DMA1_Channel2_IRQHandler+0x12>
		{
			Globalptr2func[1]();
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <DMA1_Channel2_IRQHandler+0x30>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	4798      	blx	r3
		}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH2);
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <DMA1_Channel2_IRQHandler+0x34>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <DMA1_Channel2_IRQHandler+0x34>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH2);
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <DMA1_Channel2_IRQHandler+0x34>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a04      	ldr	r2, [pc, #16]	; (80005e4 <DMA1_Channel2_IRQHandler+0x34>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	6053      	str	r3, [r2, #4]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000074 	.word	0x20000074
 80005e4:	40020000 	.word	0x40020000

080005e8 <DMA1_Channel3_IRQHandler>:

void DMA1_Channel3_IRQHandler (void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	if (Globalptr2func[2]!=NULL)
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <DMA1_Channel3_IRQHandler+0x30>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <DMA1_Channel3_IRQHandler+0x12>
		{
			Globalptr2func[2]();
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <DMA1_Channel3_IRQHandler+0x30>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4798      	blx	r3
		}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH3);
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <DMA1_Channel3_IRQHandler+0x34>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <DMA1_Channel3_IRQHandler+0x34>)
 8000600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000604:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH3);
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <DMA1_Channel3_IRQHandler+0x34>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <DMA1_Channel3_IRQHandler+0x34>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6053      	str	r3, [r2, #4]
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000074 	.word	0x20000074
 800061c:	40020000 	.word	0x40020000

08000620 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	if (Globalptr2func[3]!=NULL)
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <DMA1_Channel4_IRQHandler+0x30>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <DMA1_Channel4_IRQHandler+0x12>
			{
				Globalptr2func[3]();
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <DMA1_Channel4_IRQHandler+0x30>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4798      	blx	r3
			}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH4);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <DMA1_Channel4_IRQHandler+0x34>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <DMA1_Channel4_IRQHandler+0x34>)
 8000638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800063c:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH4);
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <DMA1_Channel4_IRQHandler+0x34>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <DMA1_Channel4_IRQHandler+0x34>)
 8000644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000648:	6053      	str	r3, [r2, #4]
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000074 	.word	0x20000074
 8000654:	40020000 	.word	0x40020000

08000658 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if (Globalptr2func[4]!=NULL)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <DMA1_Channel5_IRQHandler+0x30>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <DMA1_Channel5_IRQHandler+0x12>
			{
				Globalptr2func[4]();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <DMA1_Channel5_IRQHandler+0x30>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	4798      	blx	r3
			}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH5);
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <DMA1_Channel5_IRQHandler+0x34>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <DMA1_Channel5_IRQHandler+0x34>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH5);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <DMA1_Channel5_IRQHandler+0x34>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <DMA1_Channel5_IRQHandler+0x34>)
 800067c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000680:	6053      	str	r3, [r2, #4]
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000074 	.word	0x20000074
 800068c:	40020000 	.word	0x40020000

08000690 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if (Globalptr2func[5]!=NULL)
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <DMA1_Channel6_IRQHandler+0x30>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <DMA1_Channel6_IRQHandler+0x12>
			{
				Globalptr2func[5]();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <DMA1_Channel6_IRQHandler+0x30>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	4798      	blx	r3
			}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH6);
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <DMA1_Channel6_IRQHandler+0x34>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <DMA1_Channel6_IRQHandler+0x34>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH6);
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <DMA1_Channel6_IRQHandler+0x34>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <DMA1_Channel6_IRQHandler+0x34>)
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	6053      	str	r3, [r2, #4]
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000074 	.word	0x20000074
 80006c4:	40020000 	.word	0x40020000

080006c8 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler (void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	if (Globalptr2func[6]!=NULL)
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <DMA1_Channel7_IRQHandler+0x30>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <DMA1_Channel7_IRQHandler+0x12>
			{
				Globalptr2func[6]();
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <DMA1_Channel7_IRQHandler+0x30>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4798      	blx	r3
			}
	SET_BIT(DMA -> IFCR ,DMA_TCIF_CH7);
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <DMA1_Channel7_IRQHandler+0x34>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <DMA1_Channel7_IRQHandler+0x34>)
 80006e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e4:	6053      	str	r3, [r2, #4]
	SET_BIT(DMA -> IFCR ,DMA_GIF_CH7);
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <DMA1_Channel7_IRQHandler+0x34>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <DMA1_Channel7_IRQHandler+0x34>)
 80006ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f0:	6053      	str	r3, [r2, #4]
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000074 	.word	0x20000074
 80006fc:	40020000 	.word	0x40020000

08000700 <ISR>:
u32 Arr1[1000]={0};
u32 Arr2[1000];
u32 Arr3[1000]={0};
u32 Arr4[1000];
void ISR()
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	flag=1;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <ISR+0x14>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000090 	.word	0x20000090

08000718 <main>:
int main (void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 800071e:	f7ff fd27 	bl	8000170 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_DMA1,RCC_AHB);
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fd39 	bl	800019c <RCC_voidEnableClock>
	MNVIC_u8EnableInterrupt(NVIC_DMA1);
 800072a:	200b      	movs	r0, #11
 800072c:	f7ff fdaa 	bl	8000284 <MNVIC_u8EnableInterrupt>

	DMA_voidSetCallBack(ISR, CH1);
 8000730:	2101      	movs	r1, #1
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0x58>)
 8000734:	f7ff ff04 	bl	8000540 <DMA_voidSetCallBack>
	DMA_voidInit();
 8000738:	f7ff fe8e 	bl	8000458 <DMA_voidInit>
	//DMA -> Channel[0].CCR |= 1<<DMA_TCIE;
	DMA_u8ChannelStart(Arr1, Arr2, 1000);
 800073c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <main+0x5c>)
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0x60>)
 8000744:	f7ff fed8 	bl	80004f8 <DMA_u8ChannelStart>

	for(u16 i=0;i<1000;i++)
 8000748:	2300      	movs	r3, #0
 800074a:	80fb      	strh	r3, [r7, #6]
 800074c:	e00a      	b.n	8000764 <main+0x4c>
	{
		Arr4[i]=Arr3[i];
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	490a      	ldr	r1, [pc, #40]	; (800077c <main+0x64>)
 8000754:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000758:	4909      	ldr	r1, [pc, #36]	; (8000780 <main+0x68>)
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(u16 i=0;i<1000;i++)
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	3301      	adds	r3, #1
 8000762:	80fb      	strh	r3, [r7, #6]
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800076a:	d3f0      	bcc.n	800074e <main+0x36>
	}
	while(1)
 800076c:	e7fe      	b.n	800076c <main+0x54>
 800076e:	bf00      	nop
 8000770:	08000701 	.word	0x08000701
 8000774:	20001034 	.word	0x20001034
 8000778:	20000094 	.word	0x20000094
 800077c:	20001fd4 	.word	0x20001fd4
 8000780:	20002f74 	.word	0x20002f74

08000784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000786:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000788:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	; (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	; (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007b2:	f000 f811 	bl	80007d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b6:	f7ff ffaf 	bl	8000718 <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   r0, =_estack
 80007bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007c8:	08000840 	.word	0x08000840
  ldr r2, =_sbss
 80007cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007d0:	20003f14 	.word	0x20003f14

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <__libc_init_array>:
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	2600      	movs	r6, #0
 80007dc:	4d0c      	ldr	r5, [pc, #48]	; (8000810 <__libc_init_array+0x38>)
 80007de:	4c0d      	ldr	r4, [pc, #52]	; (8000814 <__libc_init_array+0x3c>)
 80007e0:	1b64      	subs	r4, r4, r5
 80007e2:	10a4      	asrs	r4, r4, #2
 80007e4:	42a6      	cmp	r6, r4
 80007e6:	d109      	bne.n	80007fc <__libc_init_array+0x24>
 80007e8:	f000 f81a 	bl	8000820 <_init>
 80007ec:	2600      	movs	r6, #0
 80007ee:	4d0a      	ldr	r5, [pc, #40]	; (8000818 <__libc_init_array+0x40>)
 80007f0:	4c0a      	ldr	r4, [pc, #40]	; (800081c <__libc_init_array+0x44>)
 80007f2:	1b64      	subs	r4, r4, r5
 80007f4:	10a4      	asrs	r4, r4, #2
 80007f6:	42a6      	cmp	r6, r4
 80007f8:	d105      	bne.n	8000806 <__libc_init_array+0x2e>
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000800:	4798      	blx	r3
 8000802:	3601      	adds	r6, #1
 8000804:	e7ee      	b.n	80007e4 <__libc_init_array+0xc>
 8000806:	f855 3b04 	ldr.w	r3, [r5], #4
 800080a:	4798      	blx	r3
 800080c:	3601      	adds	r6, #1
 800080e:	e7f2      	b.n	80007f6 <__libc_init_array+0x1e>
 8000810:	08000838 	.word	0x08000838
 8000814:	08000838 	.word	0x08000838
 8000818:	08000838 	.word	0x08000838
 800081c:	0800083c 	.word	0x0800083c

08000820 <_init>:
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	bf00      	nop
 8000824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000826:	bc08      	pop	{r3}
 8000828:	469e      	mov	lr, r3
 800082a:	4770      	bx	lr

0800082c <_fini>:
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	bf00      	nop
 8000830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000832:	bc08      	pop	{r3}
 8000834:	469e      	mov	lr, r3
 8000836:	4770      	bx	lr
